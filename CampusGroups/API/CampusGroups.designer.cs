#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CampusGroups.API
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rIrCampus1.8TestElizaveta")]
	public partial class CampusGroupsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserAccount(UserAccount instance);
    partial void UpdateUserAccount(UserAccount instance);
    partial void DeleteUserAccount(UserAccount instance);
    partial void InsertUserAccountLinkDcProfile(UserAccountLinkDcProfile instance);
    partial void UpdateUserAccountLinkDcProfile(UserAccountLinkDcProfile instance);
    partial void DeleteUserAccountLinkDcProfile(UserAccountLinkDcProfile instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertDcSubdivision(DcSubdivision instance);
    partial void UpdateDcSubdivision(DcSubdivision instance);
    partial void DeleteDcSubdivision(DcSubdivision instance);
    partial void InsertDcProfile(DcProfile instance);
    partial void UpdateDcProfile(DcProfile instance);
    partial void DeleteDcProfile(DcProfile instance);
    partial void InsertMessageGroup(MessageGroup instance);
    partial void UpdateMessageGroup(MessageGroup instance);
    partial void DeleteMessageGroup(MessageGroup instance);
    partial void InsertMessageDetail(MessageDetail instance);
    partial void UpdateMessageDetail(MessageDetail instance);
    partial void DeleteMessageDetail(MessageDetail instance);
    partial void InsertMessageGroupUser(MessageGroupUser instance);
    partial void UpdateMessageGroupUser(MessageGroupUser instance);
    partial void DeleteMessageGroupUser(MessageGroupUser instance);
    partial void InsertMessageGroupInvitation(MessageGroupInvitation instance);
    partial void UpdateMessageGroupInvitation(MessageGroupInvitation instance);
    partial void DeleteMessageGroupInvitation(MessageGroupInvitation instance);
    partial void InsertMessageGroupRequest(MessageGroupRequest instance);
    partial void UpdateMessageGroupRequest(MessageGroupRequest instance);
    partial void DeleteMessageGroupRequest(MessageGroupRequest instance);
    #endregion
		
		public CampusGroupsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["rIrCampus1_8TestElizavetaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CampusGroupsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CampusGroupsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CampusGroupsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CampusGroupsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserAccount> UserAccounts
		{
			get
			{
				return this.GetTable<UserAccount>();
			}
		}
		
		public System.Data.Linq.Table<UserAccountLinkDcProfile> UserAccountLinkDcProfiles
		{
			get
			{
				return this.GetTable<UserAccountLinkDcProfile>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<DcSubdivision> DcSubdivisions
		{
			get
			{
				return this.GetTable<DcSubdivision>();
			}
		}
		
		public System.Data.Linq.Table<DcProfile> DcProfiles
		{
			get
			{
				return this.GetTable<DcProfile>();
			}
		}
		
		public System.Data.Linq.Table<MessageGroup> MessageGroups
		{
			get
			{
				return this.GetTable<MessageGroup>();
			}
		}
		
		public System.Data.Linq.Table<MessageDetail> MessageDetails
		{
			get
			{
				return this.GetTable<MessageDetail>();
			}
		}
		
		public System.Data.Linq.Table<MessageGroupUser> MessageGroupUsers
		{
			get
			{
				return this.GetTable<MessageGroupUser>();
			}
		}
		
		public System.Data.Linq.Table<MessageGroupInvitation> MessageGroupInvitations
		{
			get
			{
				return this.GetTable<MessageGroupInvitation>();
			}
		}
		
		public System.Data.Linq.Table<MessageGroupRequest> MessageGroupRequests
		{
			get
			{
				return this.GetTable<MessageGroupRequest>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccount")]
	public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAccountId;
		
		private string _Login;
		
		private string _Password;
		
		private string _Email;
		
		private string _NewPassword;
		
		private string _Cookie;
		
		private string _FullName;
		
		private string _ScientificInterest;
		
		private string _CodeAssembly;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private EntitySet<UserAccountLinkDcProfile> _UserAccountLinkDcProfiles;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<MessageDetail> _MessageDetails;
		
		private EntitySet<MessageGroupUser> _MessageGroupUsers;
		
		private EntitySet<MessageGroupInvitation> _MessageGroupInvitations;
		
		private EntitySet<MessageGroupRequest> _MessageGroupRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAccountIdChanging(int value);
    partial void OnUserAccountIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNewPasswordChanging(string value);
    partial void OnNewPasswordChanged();
    partial void OnCookieChanging(string value);
    partial void OnCookieChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnScientificInterestChanging(string value);
    partial void OnScientificInterestChanged();
    partial void OnCodeAssemblyChanging(string value);
    partial void OnCodeAssemblyChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    #endregion
		
		public UserAccount()
		{
			this._UserAccountLinkDcProfiles = new EntitySet<UserAccountLinkDcProfile>(new Action<UserAccountLinkDcProfile>(this.attach_UserAccountLinkDcProfiles), new Action<UserAccountLinkDcProfile>(this.detach_UserAccountLinkDcProfiles));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MessageDetails = new EntitySet<MessageDetail>(new Action<MessageDetail>(this.attach_MessageDetails), new Action<MessageDetail>(this.detach_MessageDetails));
			this._MessageGroupUsers = new EntitySet<MessageGroupUser>(new Action<MessageGroupUser>(this.attach_MessageGroupUsers), new Action<MessageGroupUser>(this.detach_MessageGroupUsers));
			this._MessageGroupInvitations = new EntitySet<MessageGroupInvitation>(new Action<MessageGroupInvitation>(this.attach_MessageGroupInvitations), new Action<MessageGroupInvitation>(this.detach_MessageGroupInvitations));
			this._MessageGroupRequests = new EntitySet<MessageGroupRequest>(new Action<MessageGroupRequest>(this.attach_MessageGroupRequests), new Action<MessageGroupRequest>(this.detach_MessageGroupRequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAccountId
		{
			get
			{
				return this._UserAccountId;
			}
			set
			{
				if ((this._UserAccountId != value))
				{
					this.OnUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountId = value;
					this.SendPropertyChanged("UserAccountId");
					this.OnUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPassword", DbType="NVarChar(50)")]
		public string NewPassword
		{
			get
			{
				return this._NewPassword;
			}
			set
			{
				if ((this._NewPassword != value))
				{
					this.OnNewPasswordChanging(value);
					this.SendPropertyChanging();
					this._NewPassword = value;
					this.SendPropertyChanged("NewPassword");
					this.OnNewPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cookie", DbType="Char(26)")]
		public string Cookie
		{
			get
			{
				return this._Cookie;
			}
			set
			{
				if ((this._Cookie != value))
				{
					this.OnCookieChanging(value);
					this.SendPropertyChanging();
					this._Cookie = value;
					this.SendPropertyChanged("Cookie");
					this.OnCookieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScientificInterest", DbType="NVarChar(255)")]
		public string ScientificInterest
		{
			get
			{
				return this._ScientificInterest;
			}
			set
			{
				if ((this._ScientificInterest != value))
				{
					this.OnScientificInterestChanging(value);
					this.SendPropertyChanging();
					this._ScientificInterest = value;
					this.SendPropertyChanged("ScientificInterest");
					this.OnScientificInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeAssembly", DbType="Char(10)")]
		public string CodeAssembly
		{
			get
			{
				return this._CodeAssembly;
			}
			set
			{
				if ((this._CodeAssembly != value))
				{
					this.OnCodeAssemblyChanging(value);
					this.SendPropertyChanging();
					this._CodeAssembly = value;
					this.SendPropertyChanged("CodeAssembly");
					this.OnCodeAssemblyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_UserAccountLinkDcProfile", Storage="_UserAccountLinkDcProfiles", ThisKey="UserAccountId", OtherKey="UserAccountId")]
		public EntitySet<UserAccountLinkDcProfile> UserAccountLinkDcProfiles
		{
			get
			{
				return this._UserAccountLinkDcProfiles;
			}
			set
			{
				this._UserAccountLinkDcProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Message", Storage="_Messages", ThisKey="UserAccountId", OtherKey="SenderUserAccountId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageDetail", Storage="_MessageDetails", ThisKey="UserAccountId", OtherKey="UserAccountId")]
		public EntitySet<MessageDetail> MessageDetails
		{
			get
			{
				return this._MessageDetails;
			}
			set
			{
				this._MessageDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageGroupUser", Storage="_MessageGroupUsers", ThisKey="UserAccountId", OtherKey="UserAccountId")]
		public EntitySet<MessageGroupUser> MessageGroupUsers
		{
			get
			{
				return this._MessageGroupUsers;
			}
			set
			{
				this._MessageGroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageGroupInvitation", Storage="_MessageGroupInvitations", ThisKey="UserAccountId", OtherKey="UserAccountId")]
		public EntitySet<MessageGroupInvitation> MessageGroupInvitations
		{
			get
			{
				return this._MessageGroupInvitations;
			}
			set
			{
				this._MessageGroupInvitations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageGroupRequest", Storage="_MessageGroupRequests", ThisKey="UserAccountId", OtherKey="UserAccountId")]
		public EntitySet<MessageGroupRequest> MessageGroupRequests
		{
			get
			{
				return this._MessageGroupRequests;
			}
			set
			{
				this._MessageGroupRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAccountLinkDcProfiles(UserAccountLinkDcProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_UserAccountLinkDcProfiles(UserAccountLinkDcProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_MessageDetails(MessageDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_MessageDetails(MessageDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_MessageGroupUsers(MessageGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_MessageGroupUsers(MessageGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_MessageGroupInvitations(MessageGroupInvitation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_MessageGroupInvitations(MessageGroupInvitation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_MessageGroupRequests(MessageGroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_MessageGroupRequests(MessageGroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccountLinkDcProfile")]
	public partial class UserAccountLinkDcProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAccountLinkDcProfileId;
		
		private int _UserAccountId;
		
		private System.Nullable<int> _DcProfileId;
		
		private int _DcSubdivisionId;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private System.Nullable<int> _RtProfilePermissionId;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<DcSubdivision> _DcSubdivision;
		
		private EntityRef<DcProfile> _DcProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAccountLinkDcProfileIdChanging(int value);
    partial void OnUserAccountLinkDcProfileIdChanged();
    partial void OnUserAccountIdChanging(int value);
    partial void OnUserAccountIdChanged();
    partial void OnDcProfileIdChanging(System.Nullable<int> value);
    partial void OnDcProfileIdChanged();
    partial void OnDcSubdivisionIdChanging(int value);
    partial void OnDcSubdivisionIdChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    partial void OnRtProfilePermissionIdChanging(System.Nullable<int> value);
    partial void OnRtProfilePermissionIdChanged();
    #endregion
		
		public UserAccountLinkDcProfile()
		{
			this._UserAccount = default(EntityRef<UserAccount>);
			this._DcSubdivision = default(EntityRef<DcSubdivision>);
			this._DcProfile = default(EntityRef<DcProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountLinkDcProfileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAccountLinkDcProfileId
		{
			get
			{
				return this._UserAccountLinkDcProfileId;
			}
			set
			{
				if ((this._UserAccountLinkDcProfileId != value))
				{
					this.OnUserAccountLinkDcProfileIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountLinkDcProfileId = value;
					this.SendPropertyChanged("UserAccountLinkDcProfileId");
					this.OnUserAccountLinkDcProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountId", DbType="Int NOT NULL")]
		public int UserAccountId
		{
			get
			{
				return this._UserAccountId;
			}
			set
			{
				if ((this._UserAccountId != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountId = value;
					this.SendPropertyChanged("UserAccountId");
					this.OnUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DcProfileId", DbType="Int")]
		public System.Nullable<int> DcProfileId
		{
			get
			{
				return this._DcProfileId;
			}
			set
			{
				if ((this._DcProfileId != value))
				{
					if (this._DcProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDcProfileIdChanging(value);
					this.SendPropertyChanging();
					this._DcProfileId = value;
					this.SendPropertyChanged("DcProfileId");
					this.OnDcProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DcSubdivisionId", DbType="Int NOT NULL")]
		public int DcSubdivisionId
		{
			get
			{
				return this._DcSubdivisionId;
			}
			set
			{
				if ((this._DcSubdivisionId != value))
				{
					if (this._DcSubdivision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDcSubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DcSubdivisionId = value;
					this.SendPropertyChanged("DcSubdivisionId");
					this.OnDcSubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RtProfilePermissionId", DbType="Int")]
		public System.Nullable<int> RtProfilePermissionId
		{
			get
			{
				return this._RtProfilePermissionId;
			}
			set
			{
				if ((this._RtProfilePermissionId != value))
				{
					this.OnRtProfilePermissionIdChanging(value);
					this.SendPropertyChanging();
					this._RtProfilePermissionId = value;
					this.SendPropertyChanged("RtProfilePermissionId");
					this.OnRtProfilePermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_UserAccountLinkDcProfile", Storage="_UserAccount", ThisKey="UserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.UserAccountLinkDcProfiles.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.UserAccountLinkDcProfiles.Add(this);
						this._UserAccountId = value.UserAccountId;
					}
					else
					{
						this._UserAccountId = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcSubdivision_UserAccountLinkDcProfile", Storage="_DcSubdivision", ThisKey="DcSubdivisionId", OtherKey="DcSubdivisionId", IsForeignKey=true)]
		public DcSubdivision DcSubdivision
		{
			get
			{
				return this._DcSubdivision.Entity;
			}
			set
			{
				DcSubdivision previousValue = this._DcSubdivision.Entity;
				if (((previousValue != value) 
							|| (this._DcSubdivision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DcSubdivision.Entity = null;
						previousValue.UserAccountLinkDcProfiles.Remove(this);
					}
					this._DcSubdivision.Entity = value;
					if ((value != null))
					{
						value.UserAccountLinkDcProfiles.Add(this);
						this._DcSubdivisionId = value.DcSubdivisionId;
					}
					else
					{
						this._DcSubdivisionId = default(int);
					}
					this.SendPropertyChanged("DcSubdivision");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcProfile_UserAccountLinkDcProfile", Storage="_DcProfile", ThisKey="DcProfileId", OtherKey="DcProfileId", IsForeignKey=true)]
		public DcProfile DcProfile
		{
			get
			{
				return this._DcProfile.Entity;
			}
			set
			{
				DcProfile previousValue = this._DcProfile.Entity;
				if (((previousValue != value) 
							|| (this._DcProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DcProfile.Entity = null;
						previousValue.UserAccountLinkDcProfiles.Remove(this);
					}
					this._DcProfile.Entity = value;
					if ((value != null))
					{
						value.UserAccountLinkDcProfiles.Add(this);
						this._DcProfileId = value.DcProfileId;
					}
					else
					{
						this._DcProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DcProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private int _SenderUserAccountId;
		
		private string _Text;
		
		private string _Subject;
		
		private System.DateTime _DateSent;
		
		private int _MessageGroupId;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private EntitySet<MessageDetail> _MessageDetails;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<MessageGroup> _MessageGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnSenderUserAccountIdChanging(int value);
    partial void OnSenderUserAccountIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDateSentChanging(System.DateTime value);
    partial void OnDateSentChanged();
    partial void OnMessageGroupIdChanging(int value);
    partial void OnMessageGroupIdChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    #endregion
		
		public Message()
		{
			this._MessageDetails = new EntitySet<MessageDetail>(new Action<MessageDetail>(this.attach_MessageDetails), new Action<MessageDetail>(this.detach_MessageDetails));
			this._UserAccount = default(EntityRef<UserAccount>);
			this._MessageGroup = default(EntityRef<MessageGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderUserAccountId", DbType="Int NOT NULL")]
		public int SenderUserAccountId
		{
			get
			{
				return this._SenderUserAccountId;
			}
			set
			{
				if ((this._SenderUserAccountId != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._SenderUserAccountId = value;
					this.SendPropertyChanged("SenderUserAccountId");
					this.OnSenderUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(250)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSent", DbType="DateTime NOT NULL")]
		public System.DateTime DateSent
		{
			get
			{
				return this._DateSent;
			}
			set
			{
				if ((this._DateSent != value))
				{
					this.OnDateSentChanging(value);
					this.SendPropertyChanging();
					this._DateSent = value;
					this.SendPropertyChanged("DateSent");
					this.OnDateSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupId", DbType="Int NOT NULL")]
		public int MessageGroupId
		{
			get
			{
				return this._MessageGroupId;
			}
			set
			{
				if ((this._MessageGroupId != value))
				{
					if (this._MessageGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupId = value;
					this.SendPropertyChanged("MessageGroupId");
					this.OnMessageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageDetail", Storage="_MessageDetails", ThisKey="MessageId", OtherKey="MessageId")]
		public EntitySet<MessageDetail> MessageDetails
		{
			get
			{
				return this._MessageDetails;
			}
			set
			{
				this._MessageDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Message", Storage="_UserAccount", ThisKey="SenderUserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._SenderUserAccountId = value.UserAccountId;
					}
					else
					{
						this._SenderUserAccountId = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_Message", Storage="_MessageGroup", ThisKey="MessageGroupId", OtherKey="MessageGroupId", IsForeignKey=true)]
		public MessageGroup MessageGroup
		{
			get
			{
				return this._MessageGroup.Entity;
			}
			set
			{
				MessageGroup previousValue = this._MessageGroup.Entity;
				if (((previousValue != value) 
							|| (this._MessageGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageGroup.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._MessageGroup.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._MessageGroupId = value.MessageGroupId;
					}
					else
					{
						this._MessageGroupId = default(int);
					}
					this.SendPropertyChanged("MessageGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageDetails(MessageDetail entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_MessageDetails(MessageDetail entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DcSubdivision")]
	public partial class DcSubdivision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DcSubdivisionId;
		
		private System.Nullable<int> _ParentId;
		
		private System.Nullable<int> _OwnerId;
		
		private int _DcSubdivisionTypeId;
		
		private System.Nullable<char> _DcSubdivisionLevel;
		
		private string _Name;
		
		private string _NameShort;
		
		private string _Abbreviation;
		
		private string _AbbreviationEng;
		
		private string _Code;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private EntitySet<UserAccountLinkDcProfile> _UserAccountLinkDcProfiles;
		
		private EntitySet<DcSubdivision> _DcSubdivisions;
		
		private EntitySet<DcSubdivision> _DcSubdivisions1;
		
		private EntityRef<DcSubdivision> _DcSubdivision1;
		
		private EntityRef<DcSubdivision> _DcSubdivision2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDcSubdivisionIdChanging(int value);
    partial void OnDcSubdivisionIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnOwnerIdChanging(System.Nullable<int> value);
    partial void OnOwnerIdChanged();
    partial void OnDcSubdivisionTypeIdChanging(int value);
    partial void OnDcSubdivisionTypeIdChanged();
    partial void OnDcSubdivisionLevelChanging(System.Nullable<char> value);
    partial void OnDcSubdivisionLevelChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameShortChanging(string value);
    partial void OnNameShortChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnAbbreviationEngChanging(string value);
    partial void OnAbbreviationEngChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    #endregion
		
		public DcSubdivision()
		{
			this._UserAccountLinkDcProfiles = new EntitySet<UserAccountLinkDcProfile>(new Action<UserAccountLinkDcProfile>(this.attach_UserAccountLinkDcProfiles), new Action<UserAccountLinkDcProfile>(this.detach_UserAccountLinkDcProfiles));
			this._DcSubdivisions = new EntitySet<DcSubdivision>(new Action<DcSubdivision>(this.attach_DcSubdivisions), new Action<DcSubdivision>(this.detach_DcSubdivisions));
			this._DcSubdivisions1 = new EntitySet<DcSubdivision>(new Action<DcSubdivision>(this.attach_DcSubdivisions1), new Action<DcSubdivision>(this.detach_DcSubdivisions1));
			this._DcSubdivision1 = default(EntityRef<DcSubdivision>);
			this._DcSubdivision2 = default(EntityRef<DcSubdivision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DcSubdivisionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DcSubdivisionId
		{
			get
			{
				return this._DcSubdivisionId;
			}
			set
			{
				if ((this._DcSubdivisionId != value))
				{
					this.OnDcSubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DcSubdivisionId = value;
					this.SendPropertyChanged("DcSubdivisionId");
					this.OnDcSubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._DcSubdivision1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int")]
		public System.Nullable<int> OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._DcSubdivision2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DcSubdivisionTypeId", DbType="Int NOT NULL")]
		public int DcSubdivisionTypeId
		{
			get
			{
				return this._DcSubdivisionTypeId;
			}
			set
			{
				if ((this._DcSubdivisionTypeId != value))
				{
					this.OnDcSubdivisionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DcSubdivisionTypeId = value;
					this.SendPropertyChanged("DcSubdivisionTypeId");
					this.OnDcSubdivisionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DcSubdivisionLevel", DbType="Char(1)")]
		public System.Nullable<char> DcSubdivisionLevel
		{
			get
			{
				return this._DcSubdivisionLevel;
			}
			set
			{
				if ((this._DcSubdivisionLevel != value))
				{
					this.OnDcSubdivisionLevelChanging(value);
					this.SendPropertyChanging();
					this._DcSubdivisionLevel = value;
					this.SendPropertyChanged("DcSubdivisionLevel");
					this.OnDcSubdivisionLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameShort", DbType="NVarChar(255)")]
		public string NameShort
		{
			get
			{
				return this._NameShort;
			}
			set
			{
				if ((this._NameShort != value))
				{
					this.OnNameShortChanging(value);
					this.SendPropertyChanging();
					this._NameShort = value;
					this.SendPropertyChanged("NameShort");
					this.OnNameShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(50)")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationEng", DbType="NVarChar(50)")]
		public string AbbreviationEng
		{
			get
			{
				return this._AbbreviationEng;
			}
			set
			{
				if ((this._AbbreviationEng != value))
				{
					this.OnAbbreviationEngChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationEng = value;
					this.SendPropertyChanged("AbbreviationEng");
					this.OnAbbreviationEngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcSubdivision_UserAccountLinkDcProfile", Storage="_UserAccountLinkDcProfiles", ThisKey="DcSubdivisionId", OtherKey="DcSubdivisionId")]
		public EntitySet<UserAccountLinkDcProfile> UserAccountLinkDcProfiles
		{
			get
			{
				return this._UserAccountLinkDcProfiles;
			}
			set
			{
				this._UserAccountLinkDcProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcSubdivision_DcSubdivision", Storage="_DcSubdivisions", ThisKey="DcSubdivisionId", OtherKey="ParentId")]
		public EntitySet<DcSubdivision> DcSubdivisions
		{
			get
			{
				return this._DcSubdivisions;
			}
			set
			{
				this._DcSubdivisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcSubdivision_DcSubdivision1", Storage="_DcSubdivisions1", ThisKey="DcSubdivisionId", OtherKey="OwnerId")]
		public EntitySet<DcSubdivision> DcSubdivisions1
		{
			get
			{
				return this._DcSubdivisions1;
			}
			set
			{
				this._DcSubdivisions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcSubdivision_DcSubdivision", Storage="_DcSubdivision1", ThisKey="ParentId", OtherKey="DcSubdivisionId", IsForeignKey=true)]
		public DcSubdivision DcSubdivision1
		{
			get
			{
				return this._DcSubdivision1.Entity;
			}
			set
			{
				DcSubdivision previousValue = this._DcSubdivision1.Entity;
				if (((previousValue != value) 
							|| (this._DcSubdivision1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DcSubdivision1.Entity = null;
						previousValue.DcSubdivisions.Remove(this);
					}
					this._DcSubdivision1.Entity = value;
					if ((value != null))
					{
						value.DcSubdivisions.Add(this);
						this._ParentId = value.DcSubdivisionId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DcSubdivision1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcSubdivision_DcSubdivision1", Storage="_DcSubdivision2", ThisKey="OwnerId", OtherKey="DcSubdivisionId", IsForeignKey=true)]
		public DcSubdivision DcSubdivision2
		{
			get
			{
				return this._DcSubdivision2.Entity;
			}
			set
			{
				DcSubdivision previousValue = this._DcSubdivision2.Entity;
				if (((previousValue != value) 
							|| (this._DcSubdivision2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DcSubdivision2.Entity = null;
						previousValue.DcSubdivisions1.Remove(this);
					}
					this._DcSubdivision2.Entity = value;
					if ((value != null))
					{
						value.DcSubdivisions1.Add(this);
						this._OwnerId = value.DcSubdivisionId;
					}
					else
					{
						this._OwnerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DcSubdivision2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAccountLinkDcProfiles(UserAccountLinkDcProfile entity)
		{
			this.SendPropertyChanging();
			entity.DcSubdivision = this;
		}
		
		private void detach_UserAccountLinkDcProfiles(UserAccountLinkDcProfile entity)
		{
			this.SendPropertyChanging();
			entity.DcSubdivision = null;
		}
		
		private void attach_DcSubdivisions(DcSubdivision entity)
		{
			this.SendPropertyChanging();
			entity.DcSubdivision1 = this;
		}
		
		private void detach_DcSubdivisions(DcSubdivision entity)
		{
			this.SendPropertyChanging();
			entity.DcSubdivision1 = null;
		}
		
		private void attach_DcSubdivisions1(DcSubdivision entity)
		{
			this.SendPropertyChanging();
			entity.DcSubdivision2 = this;
		}
		
		private void detach_DcSubdivisions1(DcSubdivision entity)
		{
			this.SendPropertyChanging();
			entity.DcSubdivision2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DcProfile")]
	public partial class DcProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DcProfileId;
		
		private string _Name;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private string _Description;
		
		private EntitySet<UserAccountLinkDcProfile> _UserAccountLinkDcProfiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDcProfileIdChanging(int value);
    partial void OnDcProfileIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DcProfile()
		{
			this._UserAccountLinkDcProfiles = new EntitySet<UserAccountLinkDcProfile>(new Action<UserAccountLinkDcProfile>(this.attach_UserAccountLinkDcProfiles), new Action<UserAccountLinkDcProfile>(this.detach_UserAccountLinkDcProfiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DcProfileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DcProfileId
		{
			get
			{
				return this._DcProfileId;
			}
			set
			{
				if ((this._DcProfileId != value))
				{
					this.OnDcProfileIdChanging(value);
					this.SendPropertyChanging();
					this._DcProfileId = value;
					this.SendPropertyChanged("DcProfileId");
					this.OnDcProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DcProfile_UserAccountLinkDcProfile", Storage="_UserAccountLinkDcProfiles", ThisKey="DcProfileId", OtherKey="DcProfileId")]
		public EntitySet<UserAccountLinkDcProfile> UserAccountLinkDcProfiles
		{
			get
			{
				return this._UserAccountLinkDcProfiles;
			}
			set
			{
				this._UserAccountLinkDcProfiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAccountLinkDcProfiles(UserAccountLinkDcProfile entity)
		{
			this.SendPropertyChanging();
			entity.DcProfile = this;
		}
		
		private void detach_UserAccountLinkDcProfiles(UserAccountLinkDcProfile entity)
		{
			this.SendPropertyChanging();
			entity.DcProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageGroup")]
	public partial class MessageGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageGroupId;
		
		private string _Name;
		
		private char _IsPrivate;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<MessageGroupUser> _MessageGroupUsers;
		
		private EntitySet<MessageGroupInvitation> _MessageGroupInvitations;
		
		private EntitySet<MessageGroupRequest> _MessageGroupRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageGroupIdChanging(int value);
    partial void OnMessageGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsPrivateChanging(char value);
    partial void OnIsPrivateChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    #endregion
		
		public MessageGroup()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MessageGroupUsers = new EntitySet<MessageGroupUser>(new Action<MessageGroupUser>(this.attach_MessageGroupUsers), new Action<MessageGroupUser>(this.detach_MessageGroupUsers));
			this._MessageGroupInvitations = new EntitySet<MessageGroupInvitation>(new Action<MessageGroupInvitation>(this.attach_MessageGroupInvitations), new Action<MessageGroupInvitation>(this.detach_MessageGroupInvitations));
			this._MessageGroupRequests = new EntitySet<MessageGroupRequest>(new Action<MessageGroupRequest>(this.attach_MessageGroupRequests), new Action<MessageGroupRequest>(this.detach_MessageGroupRequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageGroupId
		{
			get
			{
				return this._MessageGroupId;
			}
			set
			{
				if ((this._MessageGroupId != value))
				{
					this.OnMessageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupId = value;
					this.SendPropertyChanged("MessageGroupId");
					this.OnMessageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrivate", DbType="Char(1) NOT NULL")]
		public char IsPrivate
		{
			get
			{
				return this._IsPrivate;
			}
			set
			{
				if ((this._IsPrivate != value))
				{
					this.OnIsPrivateChanging(value);
					this.SendPropertyChanging();
					this._IsPrivate = value;
					this.SendPropertyChanged("IsPrivate");
					this.OnIsPrivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_Message", Storage="_Messages", ThisKey="MessageGroupId", OtherKey="MessageGroupId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_MessageGroupUser", Storage="_MessageGroupUsers", ThisKey="MessageGroupId", OtherKey="MessageGroupId")]
		public EntitySet<MessageGroupUser> MessageGroupUsers
		{
			get
			{
				return this._MessageGroupUsers;
			}
			set
			{
				this._MessageGroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_MessageGroupInvitation", Storage="_MessageGroupInvitations", ThisKey="MessageGroupId", OtherKey="MessageGroupId")]
		public EntitySet<MessageGroupInvitation> MessageGroupInvitations
		{
			get
			{
				return this._MessageGroupInvitations;
			}
			set
			{
				this._MessageGroupInvitations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_MessageGroupRequest", Storage="_MessageGroupRequests", ThisKey="MessageGroupId", OtherKey="MessageGroupId")]
		public EntitySet<MessageGroupRequest> MessageGroupRequests
		{
			get
			{
				return this._MessageGroupRequests;
			}
			set
			{
				this._MessageGroupRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = null;
		}
		
		private void attach_MessageGroupUsers(MessageGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = this;
		}
		
		private void detach_MessageGroupUsers(MessageGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = null;
		}
		
		private void attach_MessageGroupInvitations(MessageGroupInvitation entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = this;
		}
		
		private void detach_MessageGroupInvitations(MessageGroupInvitation entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = null;
		}
		
		private void attach_MessageGroupRequests(MessageGroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = this;
		}
		
		private void detach_MessageGroupRequests(MessageGroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.MessageGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageDetails")]
	public partial class MessageDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageDetailsId;
		
		private int _MessageId;
		
		private int _UserAccountId;
		
		private System.Nullable<System.DateTime> _DateRead;
		
		private System.Nullable<System.DateTime> _DateView;
		
		private System.Nullable<System.DateTime> _DateDelete;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageDetailsIdChanging(int value);
    partial void OnMessageDetailsIdChanged();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnUserAccountIdChanging(int value);
    partial void OnUserAccountIdChanged();
    partial void OnDateReadChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReadChanged();
    partial void OnDateViewChanging(System.Nullable<System.DateTime> value);
    partial void OnDateViewChanged();
    partial void OnDateDeleteChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeleteChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    #endregion
		
		public MessageDetail()
		{
			this._Message = default(EntityRef<Message>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageDetailsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageDetailsId
		{
			get
			{
				return this._MessageDetailsId;
			}
			set
			{
				if ((this._MessageDetailsId != value))
				{
					this.OnMessageDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._MessageDetailsId = value;
					this.SendPropertyChanged("MessageDetailsId");
					this.OnMessageDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", DbType="Int NOT NULL")]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountId", DbType="Int NOT NULL")]
		public int UserAccountId
		{
			get
			{
				return this._UserAccountId;
			}
			set
			{
				if ((this._UserAccountId != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountId = value;
					this.SendPropertyChanged("UserAccountId");
					this.OnUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRead", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRead
		{
			get
			{
				return this._DateRead;
			}
			set
			{
				if ((this._DateRead != value))
				{
					this.OnDateReadChanging(value);
					this.SendPropertyChanging();
					this._DateRead = value;
					this.SendPropertyChanged("DateRead");
					this.OnDateReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateView", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateView
		{
			get
			{
				return this._DateView;
			}
			set
			{
				if ((this._DateView != value))
				{
					this.OnDateViewChanging(value);
					this.SendPropertyChanging();
					this._DateView = value;
					this.SendPropertyChanged("DateView");
					this.OnDateViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDelete", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDelete
		{
			get
			{
				return this._DateDelete;
			}
			set
			{
				if ((this._DateDelete != value))
				{
					this.OnDateDeleteChanging(value);
					this.SendPropertyChanging();
					this._DateDelete = value;
					this.SendPropertyChanged("DateDelete");
					this.OnDateDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageDetail", Storage="_Message", ThisKey="MessageId", OtherKey="MessageId", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessageDetails.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessageDetails.Add(this);
						this._MessageId = value.MessageId;
					}
					else
					{
						this._MessageId = default(int);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageDetail", Storage="_UserAccount", ThisKey="UserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.MessageDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.MessageDetails.Add(this);
						this._UserAccountId = value.UserAccountId;
					}
					else
					{
						this._UserAccountId = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageGroupUser")]
	public partial class MessageGroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageGroupUserId;
		
		private int _MessageGroupId;
		
		private int _UserAccountId;
		
		private char _vcActuality;
		
		private System.DateTime _vcChangeDate;
		
		private int _IsModerator;
		
		private EntityRef<MessageGroup> _MessageGroup;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageGroupUserIdChanging(int value);
    partial void OnMessageGroupUserIdChanged();
    partial void OnMessageGroupIdChanging(int value);
    partial void OnMessageGroupIdChanged();
    partial void OnUserAccountIdChanging(int value);
    partial void OnUserAccountIdChanged();
    partial void OnvcActualityChanging(char value);
    partial void OnvcActualityChanged();
    partial void OnvcChangeDateChanging(System.DateTime value);
    partial void OnvcChangeDateChanged();
    partial void OnIsModeratorChanging(int value);
    partial void OnIsModeratorChanged();
    #endregion
		
		public MessageGroupUser()
		{
			this._MessageGroup = default(EntityRef<MessageGroup>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupUserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageGroupUserId
		{
			get
			{
				return this._MessageGroupUserId;
			}
			set
			{
				if ((this._MessageGroupUserId != value))
				{
					this.OnMessageGroupUserIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupUserId = value;
					this.SendPropertyChanged("MessageGroupUserId");
					this.OnMessageGroupUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupId", DbType="Int NOT NULL")]
		public int MessageGroupId
		{
			get
			{
				return this._MessageGroupId;
			}
			set
			{
				if ((this._MessageGroupId != value))
				{
					if (this._MessageGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupId = value;
					this.SendPropertyChanged("MessageGroupId");
					this.OnMessageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountId", DbType="Int NOT NULL")]
		public int UserAccountId
		{
			get
			{
				return this._UserAccountId;
			}
			set
			{
				if ((this._UserAccountId != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountId = value;
					this.SendPropertyChanged("UserAccountId");
					this.OnUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcActuality", DbType="Char(1) NOT NULL")]
		public char vcActuality
		{
			get
			{
				return this._vcActuality;
			}
			set
			{
				if ((this._vcActuality != value))
				{
					this.OnvcActualityChanging(value);
					this.SendPropertyChanging();
					this._vcActuality = value;
					this.SendPropertyChanged("vcActuality");
					this.OnvcActualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime vcChangeDate
		{
			get
			{
				return this._vcChangeDate;
			}
			set
			{
				if ((this._vcChangeDate != value))
				{
					this.OnvcChangeDateChanging(value);
					this.SendPropertyChanging();
					this._vcChangeDate = value;
					this.SendPropertyChanged("vcChangeDate");
					this.OnvcChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsModerator", DbType="Int NOT NULL")]
		public int IsModerator
		{
			get
			{
				return this._IsModerator;
			}
			set
			{
				if ((this._IsModerator != value))
				{
					this.OnIsModeratorChanging(value);
					this.SendPropertyChanging();
					this._IsModerator = value;
					this.SendPropertyChanged("IsModerator");
					this.OnIsModeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_MessageGroupUser", Storage="_MessageGroup", ThisKey="MessageGroupId", OtherKey="MessageGroupId", IsForeignKey=true)]
		public MessageGroup MessageGroup
		{
			get
			{
				return this._MessageGroup.Entity;
			}
			set
			{
				MessageGroup previousValue = this._MessageGroup.Entity;
				if (((previousValue != value) 
							|| (this._MessageGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageGroup.Entity = null;
						previousValue.MessageGroupUsers.Remove(this);
					}
					this._MessageGroup.Entity = value;
					if ((value != null))
					{
						value.MessageGroupUsers.Add(this);
						this._MessageGroupId = value.MessageGroupId;
					}
					else
					{
						this._MessageGroupId = default(int);
					}
					this.SendPropertyChanged("MessageGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageGroupUser", Storage="_UserAccount", ThisKey="UserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.MessageGroupUsers.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.MessageGroupUsers.Add(this);
						this._UserAccountId = value.UserAccountId;
					}
					else
					{
						this._UserAccountId = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageGroupInvitation")]
	public partial class MessageGroupInvitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageGroupInvitationId;
		
		private int _MessageGroupId;
		
		private int _UserAccountId;
		
		private System.DateTime _InvitationDate;
		
		private int _IsProcessed;
		
		private EntityRef<MessageGroup> _MessageGroup;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageGroupInvitationIdChanging(int value);
    partial void OnMessageGroupInvitationIdChanged();
    partial void OnMessageGroupIdChanging(int value);
    partial void OnMessageGroupIdChanged();
    partial void OnUserAccountIdChanging(int value);
    partial void OnUserAccountIdChanged();
    partial void OnInvitationDateChanging(System.DateTime value);
    partial void OnInvitationDateChanged();
    partial void OnIsProcessedChanging(int value);
    partial void OnIsProcessedChanged();
    #endregion
		
		public MessageGroupInvitation()
		{
			this._MessageGroup = default(EntityRef<MessageGroup>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupInvitationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageGroupInvitationId
		{
			get
			{
				return this._MessageGroupInvitationId;
			}
			set
			{
				if ((this._MessageGroupInvitationId != value))
				{
					this.OnMessageGroupInvitationIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupInvitationId = value;
					this.SendPropertyChanged("MessageGroupInvitationId");
					this.OnMessageGroupInvitationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupId", DbType="Int NOT NULL")]
		public int MessageGroupId
		{
			get
			{
				return this._MessageGroupId;
			}
			set
			{
				if ((this._MessageGroupId != value))
				{
					if (this._MessageGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupId = value;
					this.SendPropertyChanged("MessageGroupId");
					this.OnMessageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountId", DbType="Int NOT NULL")]
		public int UserAccountId
		{
			get
			{
				return this._UserAccountId;
			}
			set
			{
				if ((this._UserAccountId != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountId = value;
					this.SendPropertyChanged("UserAccountId");
					this.OnUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitationDate", DbType="DateTime NOT NULL")]
		public System.DateTime InvitationDate
		{
			get
			{
				return this._InvitationDate;
			}
			set
			{
				if ((this._InvitationDate != value))
				{
					this.OnInvitationDateChanging(value);
					this.SendPropertyChanging();
					this._InvitationDate = value;
					this.SendPropertyChanged("InvitationDate");
					this.OnInvitationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcessed", DbType="Int NOT NULL")]
		public int IsProcessed
		{
			get
			{
				return this._IsProcessed;
			}
			set
			{
				if ((this._IsProcessed != value))
				{
					this.OnIsProcessedChanging(value);
					this.SendPropertyChanging();
					this._IsProcessed = value;
					this.SendPropertyChanged("IsProcessed");
					this.OnIsProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_MessageGroupInvitation", Storage="_MessageGroup", ThisKey="MessageGroupId", OtherKey="MessageGroupId", IsForeignKey=true)]
		public MessageGroup MessageGroup
		{
			get
			{
				return this._MessageGroup.Entity;
			}
			set
			{
				MessageGroup previousValue = this._MessageGroup.Entity;
				if (((previousValue != value) 
							|| (this._MessageGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageGroup.Entity = null;
						previousValue.MessageGroupInvitations.Remove(this);
					}
					this._MessageGroup.Entity = value;
					if ((value != null))
					{
						value.MessageGroupInvitations.Add(this);
						this._MessageGroupId = value.MessageGroupId;
					}
					else
					{
						this._MessageGroupId = default(int);
					}
					this.SendPropertyChanged("MessageGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageGroupInvitation", Storage="_UserAccount", ThisKey="UserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.MessageGroupInvitations.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.MessageGroupInvitations.Add(this);
						this._UserAccountId = value.UserAccountId;
					}
					else
					{
						this._UserAccountId = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageGroupRequest")]
	public partial class MessageGroupRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageGroupRequestId;
		
		private int _MessageGroupId;
		
		private int _UserAccountId;
		
		private System.DateTime _RequestDate;
		
		private int _IsProcessed;
		
		private EntityRef<MessageGroup> _MessageGroup;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageGroupRequestIdChanging(int value);
    partial void OnMessageGroupRequestIdChanged();
    partial void OnMessageGroupIdChanging(int value);
    partial void OnMessageGroupIdChanged();
    partial void OnUserAccountIdChanging(int value);
    partial void OnUserAccountIdChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnIsProcessedChanging(int value);
    partial void OnIsProcessedChanged();
    #endregion
		
		public MessageGroupRequest()
		{
			this._MessageGroup = default(EntityRef<MessageGroup>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupRequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageGroupRequestId
		{
			get
			{
				return this._MessageGroupRequestId;
			}
			set
			{
				if ((this._MessageGroupRequestId != value))
				{
					this.OnMessageGroupRequestIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupRequestId = value;
					this.SendPropertyChanged("MessageGroupRequestId");
					this.OnMessageGroupRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageGroupId", DbType="Int NOT NULL")]
		public int MessageGroupId
		{
			get
			{
				return this._MessageGroupId;
			}
			set
			{
				if ((this._MessageGroupId != value))
				{
					if (this._MessageGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MessageGroupId = value;
					this.SendPropertyChanged("MessageGroupId");
					this.OnMessageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountId", DbType="Int NOT NULL")]
		public int UserAccountId
		{
			get
			{
				return this._UserAccountId;
			}
			set
			{
				if ((this._UserAccountId != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UserAccountId = value;
					this.SendPropertyChanged("UserAccountId");
					this.OnUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcessed", DbType="Int NOT NULL")]
		public int IsProcessed
		{
			get
			{
				return this._IsProcessed;
			}
			set
			{
				if ((this._IsProcessed != value))
				{
					this.OnIsProcessedChanging(value);
					this.SendPropertyChanging();
					this._IsProcessed = value;
					this.SendPropertyChanged("IsProcessed");
					this.OnIsProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageGroup_MessageGroupRequest", Storage="_MessageGroup", ThisKey="MessageGroupId", OtherKey="MessageGroupId", IsForeignKey=true)]
		public MessageGroup MessageGroup
		{
			get
			{
				return this._MessageGroup.Entity;
			}
			set
			{
				MessageGroup previousValue = this._MessageGroup.Entity;
				if (((previousValue != value) 
							|| (this._MessageGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageGroup.Entity = null;
						previousValue.MessageGroupRequests.Remove(this);
					}
					this._MessageGroup.Entity = value;
					if ((value != null))
					{
						value.MessageGroupRequests.Add(this);
						this._MessageGroupId = value.MessageGroupId;
					}
					else
					{
						this._MessageGroupId = default(int);
					}
					this.SendPropertyChanged("MessageGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_MessageGroupRequest", Storage="_UserAccount", ThisKey="UserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.MessageGroupRequests.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.MessageGroupRequests.Add(this);
						this._UserAccountId = value.UserAccountId;
					}
					else
					{
						this._UserAccountId = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
