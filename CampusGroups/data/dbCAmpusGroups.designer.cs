#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CampusGroups.data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbCampusGroups")]
	public partial class dbCAmpusGroupsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertPersonality(Personality instance);
    partial void UpdatePersonality(Personality instance);
    partial void DeletePersonality(Personality instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGroupRequest(GroupRequest instance);
    partial void UpdateGroupRequest(GroupRequest instance);
    partial void DeleteGroupRequest(GroupRequest instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    #endregion
		
		public dbCAmpusGroupsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbCampusGroupsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbCAmpusGroupsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbCAmpusGroupsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbCAmpusGroupsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbCAmpusGroupsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<Personality> Personalities
		{
			get
			{
				return this.GetTable<Personality>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<GroupRequest> GroupRequests
		{
			get
			{
				return this.GetTable<GroupRequest>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _attachmentId;
		
		private int _postId;
		
		private string _fileLink;
		
		private EntityRef<Post> _Post;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnattachmentIdChanging(int value);
    partial void OnattachmentIdChanged();
    partial void OnpostIdChanging(int value);
    partial void OnpostIdChanged();
    partial void OnfileLinkChanging(string value);
    partial void OnfileLinkChanged();
    #endregion
		
		public Attachment()
		{
			this._Post = default(EntityRef<Post>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attachmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int attachmentId
		{
			get
			{
				return this._attachmentId;
			}
			set
			{
				if ((this._attachmentId != value))
				{
					this.OnattachmentIdChanging(value);
					this.SendPropertyChanging();
					this._attachmentId = value;
					this.SendPropertyChanged("attachmentId");
					this.OnattachmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postId", DbType="Int NOT NULL")]
		public int postId
		{
			get
			{
				return this._postId;
			}
			set
			{
				if ((this._postId != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostIdChanging(value);
					this.SendPropertyChanging();
					this._postId = value;
					this.SendPropertyChanged("postId");
					this.OnpostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string fileLink
		{
			get
			{
				return this._fileLink;
			}
			set
			{
				if ((this._fileLink != value))
				{
					this.OnfileLinkChanging(value);
					this.SendPropertyChanging();
					this._fileLink = value;
					this.SendPropertyChanged("fileLink");
					this.OnfileLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Attachment", Storage="_Post", ThisKey="postId", OtherKey="postId", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._postId = value.postId;
					}
					else
					{
						this._postId = default(int);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userGroupId;
		
		private int _userId;
		
		private int _groupId;
		
		private int _roleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserGroupIdChanging(int value);
    partial void OnuserGroupIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OngroupIdChanging(int value);
    partial void OngroupIdChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public UserGroup()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userGroupId
		{
			get
			{
				return this._userGroupId;
			}
			set
			{
				if ((this._userGroupId != value))
				{
					this.OnuserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._userGroupId = value;
					this.SendPropertyChanged("userGroupId");
					this.OnuserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupId", DbType="Int NOT NULL")]
		public int groupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if ((this._groupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIdChanging(value);
					this.SendPropertyChanging();
					this._groupId = value;
					this.SendPropertyChanged("groupId");
					this.OngroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL")]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserGroup", Storage="_Role", ThisKey="roleId", OtherKey="roleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._roleId = value.roleId;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroup", Storage="_Group", ThisKey="groupId", OtherKey="groupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._groupId = value.groupId;
					}
					else
					{
						this._groupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personality")]
	public partial class Personality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personalityId;
		
		private int _userAccountId;
		
		private int _studyGroupId;
		
		private string _studentId;
		
		private string _lastName;
		
		private string _firstName;
		
		private string _middleName;
		
		private string _facultyLongName;
		
		private string _studyGroupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonalityIdChanging(int value);
    partial void OnpersonalityIdChanged();
    partial void OnuserAccountIdChanging(int value);
    partial void OnuserAccountIdChanged();
    partial void OnstudyGroupIdChanging(int value);
    partial void OnstudyGroupIdChanged();
    partial void OnstudentIdChanging(string value);
    partial void OnstudentIdChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnmiddleNameChanging(string value);
    partial void OnmiddleNameChanged();
    partial void OnfacultyLongNameChanging(string value);
    partial void OnfacultyLongNameChanged();
    partial void OnstudyGroupNameChanging(string value);
    partial void OnstudyGroupNameChanged();
    #endregion
		
		public Personality()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personalityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int personalityId
		{
			get
			{
				return this._personalityId;
			}
			set
			{
				if ((this._personalityId != value))
				{
					this.OnpersonalityIdChanging(value);
					this.SendPropertyChanging();
					this._personalityId = value;
					this.SendPropertyChanged("personalityId");
					this.OnpersonalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userAccountId", DbType="Int NOT NULL")]
		public int userAccountId
		{
			get
			{
				return this._userAccountId;
			}
			set
			{
				if ((this._userAccountId != value))
				{
					this.OnuserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._userAccountId = value;
					this.SendPropertyChanged("userAccountId");
					this.OnuserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studyGroupId", DbType="Int NOT NULL")]
		public int studyGroupId
		{
			get
			{
				return this._studyGroupId;
			}
			set
			{
				if ((this._studyGroupId != value))
				{
					this.OnstudyGroupIdChanging(value);
					this.SendPropertyChanging();
					this._studyGroupId = value;
					this.SendPropertyChanged("studyGroupId");
					this.OnstudyGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentId", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string studentId
		{
			get
			{
				return this._studentId;
			}
			set
			{
				if ((this._studentId != value))
				{
					this.OnstudentIdChanging(value);
					this.SendPropertyChanging();
					this._studentId = value;
					this.SendPropertyChanged("studentId");
					this.OnstudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_middleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string middleName
		{
			get
			{
				return this._middleName;
			}
			set
			{
				if ((this._middleName != value))
				{
					this.OnmiddleNameChanging(value);
					this.SendPropertyChanging();
					this._middleName = value;
					this.SendPropertyChanged("middleName");
					this.OnmiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facultyLongName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string facultyLongName
		{
			get
			{
				return this._facultyLongName;
			}
			set
			{
				if ((this._facultyLongName != value))
				{
					this.OnfacultyLongNameChanging(value);
					this.SendPropertyChanging();
					this._facultyLongName = value;
					this.SendPropertyChanged("facultyLongName");
					this.OnfacultyLongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studyGroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string studyGroupName
		{
			get
			{
				return this._studyGroupName;
			}
			set
			{
				if ((this._studyGroupName != value))
				{
					this.OnstudyGroupNameChanging(value);
					this.SendPropertyChanging();
					this._studyGroupName = value;
					this.SendPropertyChanged("studyGroupName");
					this.OnstudyGroupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _postId;
		
		private int _groupId;
		
		private int _authorId;
		
		private int _parentPostId;
		
		private string _postText;
		
		private System.DateTime _postDate;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntitySet<Post> _Posts;
		
		private EntityRef<Post> _Post1;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostIdChanging(int value);
    partial void OnpostIdChanged();
    partial void OngroupIdChanging(int value);
    partial void OngroupIdChanged();
    partial void OnauthorIdChanging(int value);
    partial void OnauthorIdChanged();
    partial void OnparentPostIdChanging(int value);
    partial void OnparentPostIdChanged();
    partial void OnpostTextChanging(string value);
    partial void OnpostTextChanged();
    partial void OnpostDateChanging(System.DateTime value);
    partial void OnpostDateChanged();
    #endregion
		
		public Post()
		{
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Post1 = default(EntityRef<Post>);
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int postId
		{
			get
			{
				return this._postId;
			}
			set
			{
				if ((this._postId != value))
				{
					this.OnpostIdChanging(value);
					this.SendPropertyChanging();
					this._postId = value;
					this.SendPropertyChanged("postId");
					this.OnpostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupId", DbType="Int NOT NULL")]
		public int groupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if ((this._groupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIdChanging(value);
					this.SendPropertyChanging();
					this._groupId = value;
					this.SendPropertyChanged("groupId");
					this.OngroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorId", DbType="Int NOT NULL")]
		public int authorId
		{
			get
			{
				return this._authorId;
			}
			set
			{
				if ((this._authorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnauthorIdChanging(value);
					this.SendPropertyChanging();
					this._authorId = value;
					this.SendPropertyChanged("authorId");
					this.OnauthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentPostId", DbType="Int NOT NULL")]
		public int parentPostId
		{
			get
			{
				return this._parentPostId;
			}
			set
			{
				if ((this._parentPostId != value))
				{
					if (this._Post1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentPostIdChanging(value);
					this.SendPropertyChanging();
					this._parentPostId = value;
					this.SendPropertyChanged("parentPostId");
					this.OnparentPostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string postText
		{
			get
			{
				return this._postText;
			}
			set
			{
				if ((this._postText != value))
				{
					this.OnpostTextChanging(value);
					this.SendPropertyChanging();
					this._postText = value;
					this.SendPropertyChanged("postText");
					this.OnpostTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postDate", DbType="Date NOT NULL")]
		public System.DateTime postDate
		{
			get
			{
				return this._postDate;
			}
			set
			{
				if ((this._postDate != value))
				{
					this.OnpostDateChanging(value);
					this.SendPropertyChanging();
					this._postDate = value;
					this.SendPropertyChanged("postDate");
					this.OnpostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Attachment", Storage="_Attachments", ThisKey="postId", OtherKey="postId")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Post", Storage="_Posts", ThisKey="postId", OtherKey="parentPostId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Post", Storage="_Post1", ThisKey="parentPostId", OtherKey="postId", IsForeignKey=true)]
		public Post Post1
		{
			get
			{
				return this._Post1.Entity;
			}
			set
			{
				Post previousValue = this._Post1.Entity;
				if (((previousValue != value) 
							|| (this._Post1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post1.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Post1.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._parentPostId = value.postId;
					}
					else
					{
						this._parentPostId = default(int);
					}
					this.SendPropertyChanged("Post1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_User", ThisKey="authorId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._authorId = value.userId;
					}
					else
					{
						this._authorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Post", Storage="_Group", ThisKey="groupId", OtherKey="groupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._groupId = value.groupId;
					}
					else
					{
						this._groupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Post1 = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Post1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleId;
		
		private string _roleName;
		
		private EntitySet<UserGroup> _UserGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public Role()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserGroup", Storage="_UserGroups", ThisKey="roleId", OtherKey="roleId")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _statusId;
		
		private string _statusName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstatusIdChanging(int value);
    partial void OnstatusIdChanged();
    partial void OnstatusNameChanging(string value);
    partial void OnstatusNameChanged();
    #endregion
		
		public Status()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int statusId
		{
			get
			{
				return this._statusId;
			}
			set
			{
				if ((this._statusId != value))
				{
					this.OnstatusIdChanging(value);
					this.SendPropertyChanging();
					this._statusId = value;
					this.SendPropertyChanged("statusId");
					this.OnstatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string statusName
		{
			get
			{
				return this._statusName;
			}
			set
			{
				if ((this._statusName != value))
				{
					this.OnstatusNameChanging(value);
					this.SendPropertyChanging();
					this._statusName = value;
					this.SendPropertyChanged("statusName");
					this.OnstatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_User", Storage="_Users", ThisKey="statusId", OtherKey="statusId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _campusUserId;
		
		private int _statusId;
		
		private string _avatarLink;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<GroupRequest> _GroupRequests;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OncampusUserIdChanging(int value);
    partial void OncampusUserIdChanged();
    partial void OnstatusIdChanging(int value);
    partial void OnstatusIdChanged();
    partial void OnavatarLinkChanging(string value);
    partial void OnavatarLinkChanged();
    #endregion
		
		public User()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._GroupRequests = new EntitySet<GroupRequest>(new Action<GroupRequest>(this.attach_GroupRequests), new Action<GroupRequest>(this.detach_GroupRequests));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_campusUserId", DbType="Int NOT NULL")]
		public int campusUserId
		{
			get
			{
				return this._campusUserId;
			}
			set
			{
				if ((this._campusUserId != value))
				{
					this.OncampusUserIdChanging(value);
					this.SendPropertyChanging();
					this._campusUserId = value;
					this.SendPropertyChanged("campusUserId");
					this.OncampusUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusId", DbType="Int NOT NULL")]
		public int statusId
		{
			get
			{
				return this._statusId;
			}
			set
			{
				if ((this._statusId != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIdChanging(value);
					this.SendPropertyChanging();
					this._statusId = value;
					this.SendPropertyChanged("statusId");
					this.OnstatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatarLink", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string avatarLink
		{
			get
			{
				return this._avatarLink;
			}
			set
			{
				if ((this._avatarLink != value))
				{
					this.OnavatarLinkChanging(value);
					this.SendPropertyChanging();
					this._avatarLink = value;
					this.SendPropertyChanged("avatarLink");
					this.OnavatarLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_UserGroups", ThisKey="userId", OtherKey="userId")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_Posts", ThisKey="userId", OtherKey="authorId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupRequest", Storage="_GroupRequests", ThisKey="userId", OtherKey="userId")]
		public EntitySet<GroupRequest> GroupRequests
		{
			get
			{
				return this._GroupRequests;
			}
			set
			{
				this._GroupRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_User", Storage="_Status", ThisKey="statusId", OtherKey="statusId", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._statusId = value.statusId;
					}
					else
					{
						this._statusId = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GroupRequests(GroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GroupRequests(GroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupRequest")]
	public partial class GroupRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _groupRequestId;
		
		private int _groupId;
		
		private int _userId;
		
		private System.DateTime _date;
		
		private int _processed;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupRequestIdChanging(int value);
    partial void OngroupRequestIdChanged();
    partial void OngroupIdChanging(int value);
    partial void OngroupIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnprocessedChanging(int value);
    partial void OnprocessedChanged();
    #endregion
		
		public GroupRequest()
		{
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupRequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int groupRequestId
		{
			get
			{
				return this._groupRequestId;
			}
			set
			{
				if ((this._groupRequestId != value))
				{
					this.OngroupRequestIdChanging(value);
					this.SendPropertyChanging();
					this._groupRequestId = value;
					this.SendPropertyChanged("groupRequestId");
					this.OngroupRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupId", DbType="Int NOT NULL")]
		public int groupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if ((this._groupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIdChanging(value);
					this.SendPropertyChanging();
					this._groupId = value;
					this.SendPropertyChanged("groupId");
					this.OngroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processed", DbType="Int NOT NULL")]
		public int processed
		{
			get
			{
				return this._processed;
			}
			set
			{
				if ((this._processed != value))
				{
					this.OnprocessedChanging(value);
					this.SendPropertyChanging();
					this._processed = value;
					this.SendPropertyChanged("processed");
					this.OnprocessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupRequest", Storage="_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GroupRequests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GroupRequests.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupRequest", Storage="_Group", ThisKey="groupId", OtherKey="groupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupRequests.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupRequests.Add(this);
						this._groupId = value.groupId;
					}
					else
					{
						this._groupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _groupId;
		
		private string _groupName;
		
		private System.DateTime _groupCreationDate;
		
		private int _usersAmmount;
		
		private string _groupDescription;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<GroupRequest> _GroupRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupIdChanging(int value);
    partial void OngroupIdChanged();
    partial void OngroupNameChanging(string value);
    partial void OngroupNameChanged();
    partial void OngroupCreationDateChanging(System.DateTime value);
    partial void OngroupCreationDateChanged();
    partial void OnusersAmmountChanging(int value);
    partial void OnusersAmmountChanged();
    partial void OngroupDescriptionChanging(string value);
    partial void OngroupDescriptionChanged();
    #endregion
		
		public Group()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._GroupRequests = new EntitySet<GroupRequest>(new Action<GroupRequest>(this.attach_GroupRequests), new Action<GroupRequest>(this.detach_GroupRequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int groupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if ((this._groupId != value))
				{
					this.OngroupIdChanging(value);
					this.SendPropertyChanging();
					this._groupId = value;
					this.SendPropertyChanged("groupId");
					this.OngroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string groupName
		{
			get
			{
				return this._groupName;
			}
			set
			{
				if ((this._groupName != value))
				{
					this.OngroupNameChanging(value);
					this.SendPropertyChanging();
					this._groupName = value;
					this.SendPropertyChanged("groupName");
					this.OngroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupCreationDate", DbType="Date NOT NULL")]
		public System.DateTime groupCreationDate
		{
			get
			{
				return this._groupCreationDate;
			}
			set
			{
				if ((this._groupCreationDate != value))
				{
					this.OngroupCreationDateChanging(value);
					this.SendPropertyChanging();
					this._groupCreationDate = value;
					this.SendPropertyChanged("groupCreationDate");
					this.OngroupCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usersAmmount", DbType="Int NOT NULL")]
		public int usersAmmount
		{
			get
			{
				return this._usersAmmount;
			}
			set
			{
				if ((this._usersAmmount != value))
				{
					this.OnusersAmmountChanging(value);
					this.SendPropertyChanging();
					this._usersAmmount = value;
					this.SendPropertyChanged("usersAmmount");
					this.OnusersAmmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupDescription", DbType="NVarChar(MAX)")]
		public string groupDescription
		{
			get
			{
				return this._groupDescription;
			}
			set
			{
				if ((this._groupDescription != value))
				{
					this.OngroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._groupDescription = value;
					this.SendPropertyChanged("groupDescription");
					this.OngroupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroup", Storage="_UserGroups", ThisKey="groupId", OtherKey="groupId")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Post", Storage="_Posts", ThisKey="groupId", OtherKey="groupId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupRequest", Storage="_GroupRequests", ThisKey="groupId", OtherKey="groupId")]
		public EntitySet<GroupRequest> GroupRequests
		{
			get
			{
				return this._GroupRequests;
			}
			set
			{
				this._GroupRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupRequests(GroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupRequests(GroupRequest entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
}
#pragma warning restore 1591
